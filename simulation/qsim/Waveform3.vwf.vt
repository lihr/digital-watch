// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/29/2016 17:00:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DigitalWatch
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DigitalWatch_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Button0_Rw;
reg Button1_Rw;
reg Button2_Rw;
reg Button3_Rw;
reg Clk_50MHz;
// wires                                               
wire Buzzer;
wire [6:0] Hr0;
wire [6:0] Hr1;
wire [6:0] Min0;
wire [6:0] Min1;
wire [6:0] Sec0;
wire [6:0] Sec1;
wire [6:0] State0;
wire button0Led;
wire button1Led;
wire button2Led;
wire button3Led;

// assign statements (if any)                          
DigitalWatch i1 (
// port map - connection between master ports and signals/registers   
	.Button0_Rw(Button0_Rw),
	.Button1_Rw(Button1_Rw),
	.Button2_Rw(Button2_Rw),
	.Button3_Rw(Button3_Rw),
	.Buzzer(Buzzer),
	.Clk_50MHz(Clk_50MHz),
	.Hr0(Hr0),
	.Hr1(Hr1),
	.Min0(Min0),
	.Min1(Min1),
	.Sec0(Sec0),
	.Sec1(Sec1),
	.State0(State0),
	.button0Led(button0Led),
	.button1Led(button1Led),
	.button2Led(button2Led),
	.button3Led(button3Led)
);
initial 
begin 
#1000000 $finish;
end 

// Button0_Rw
initial
begin
	Button0_Rw = 1'b0;
	Button0_Rw = #10000 1'b1;
	Button0_Rw = #110000 1'b0;
	Button0_Rw = #80000 1'b1;
	Button0_Rw = #270000 1'b0;
end 

// Clk_50MHz
always
begin
	Clk_50MHz = 1'b0;
	Clk_50MHz = #500 1'b1;
	#500;
end 
endmodule

